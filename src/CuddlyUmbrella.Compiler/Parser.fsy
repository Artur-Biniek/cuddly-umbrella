%{

open CuddlyUmbrella.Compiler

let stringToTypeSpec = function
    | "void" -> Ast.Void
    | "int" -> Ast.Int
    | "float" -> Ast.Float
    | "string" -> Ast.String
    | "bool" -> Ast.Bool
    | _ -> failwith "Unknown type specificator string"

%}



%token IDENTIFIER

// Keywords
%token DEF RETURN VAR IF THEN ELSE

%token <string>IDENT
%token <string>TYPE_SPEC

%token <System.Boolean>BOOL
%token <System.Int32>INT
%token <System.Single>FLOAT
%token <System.String>STRING

// Punctuation
%token LPAREN RPAREN LBRACE RBRACE COLON SEMICOLON COMMA DBLQUOTE

// Operators
%token PLUS MINUS EQ LT GT LEQ GEQ

// Assignment arror
%token LARROW

// Misc tokens
%token EOF

%start program
%type <CuddlyUmbrella.Compiler.Ast.Program> program
%type <CuddlyUmbrella.Compiler.Ast.FunctionDefinition list> fun_decl_list
%type <CuddlyUmbrella.Compiler.Ast.Statement list> stmt_list

%%

program:				  fun_decl_list stmt_list				{ ($1, $2) }
fun_decl_list:			  /* empty */							{ List.empty<Ast.FunctionDefinition> }
                        | fun_decl_list fun_decl				{ $1 @ [$2] }
                        | fun_decl								{ [$1] }
fun_decl:				IDENT									{ Ast.FunctionDefinition $1}
stmt_list:				/* empty */								{ List.empty<Ast.Statement> }
                        | stmt_list stmt						{ $1 @ [$2]}
                        | stmt									{ [$1] }
stmt:					| VAR IDENT COLON TYPE_SPEC SEMICOLON   { Ast.VariableDeclaration($2, stringToTypeSpec $4) }
    
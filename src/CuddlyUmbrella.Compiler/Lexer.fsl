{
module Lexer

open Microsoft.FSharp.Text.Lexing
open Parser


let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions

let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = '-'?digit+   
let float       = '-'?digit+ '.' digit+   
let identifier  = char(char|digit|['-' '_' '.'])* 
let whitespace  = [' ' '\t' ]
let newline     = ('\n' | '\r' '\n')

rule token = parse
// --------------------------
| whitespace	{ token lexbuf }
| newline		{ newline lexbuf; token lexbuf }
| identifier	{ IDENT(lexeme lexbuf) }
// --------------------------
| _    			{ failwith ("ParseError" + lexeme lexbuf) }
| eof			{ EOF }

{
let getAllTokens lexbuf =
    let rec aux acc cur =
        match cur with
        | EOF -> acc @ [EOF]
        | tok -> aux (acc @ [tok]) (token lexbuf)
    
    aux [] (token lexbuf)
}
